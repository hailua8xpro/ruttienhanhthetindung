@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@inject IThemeContext themeContext

@{
    Layout = "_ColumnsTwo";
    var themeName = themeContext.WorkingThemeName;

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-category-page");
    Html.AppendCssFileParts($"~/Themes/{themeName}/Content/css/productitem.css");
    Html.AppendCssFileParts($"~/Themes/{themeName}/Content/css/category.css");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}
@*category breadcrumb*@
@section categorytitle{
    <div class="page-title-wrapper"><h1 class="page-title" id="page-title-heading" aria-labelledby="page-title-heading toolbar-amount"><span class="base" data-ui-id="page-title-wrapper">@Model.Name</span></h1> </div>
}
@section Breadcrumb
    {
    @if (Model.DisplayCategoryBreadcrumb)
    {
        <div class="wrapper-breadcrums">
            <div class="container">
                <div class="breadcrumb">
                    <ul itemscope itemtype="http://schema.org/BreadcrumbList">
                        <li>
                            <a href="@Url.RouteUrl("HomePage")" title="@T("Categories.Breadcrumb.Top")">@T("Categories.Breadcrumb.Top")</a>
                            <span class="delimiter">@breadcrumbDelimiter</span>
                        </li>
                        @{ int position = 1; }
                        @foreach (var cat in Model.CategoryBreadcrumb)
                        {
                            var isLastCategory = cat.Id == Model.Id;
                            <li itemprop="itemListElement" itemscope itemtype="http://schema.org/ListItem">
                                @if (isLastCategory)
                                {
                                    <strong class="current-item" itemprop="name">@cat.Name</strong>
                                    <span itemprop="item" itemscope itemtype="http://schema.org/Thing">
                                        <link itemprop="url" href="@Url.RouteUrl("Category", new {SeName = cat.SeName})" />
                                    </span>
                                }
                                else
                                {
                                    <a href="@Url.RouteUrl("Category", new { SeName = cat.SeName })" title="@cat.Name" itemprop="item">
                                        <span itemprop="name">@cat.Name</span>
                                    </a>
                                    <span class="delimiter">@breadcrumbDelimiter</span>
                                }
                                <meta itemprop="position" content="@position" />
                            </li>
                            position++;
                        }
                    </ul>
                </div>
            </div>
        </div>
    }
}
@section left{
        <div class="block filter">
            <div class="block-title filter-title"><strong data-role="title">@T("Shop By")</strong><span class="toggle-class"></span></div>
            <div class="block-content filter-content">
                <div class="filter-options">
                    @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
                    {
                        @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
                    }
                    @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
                    {
                        @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
                    }
                </div>

            </div>
            <div class="close-expand-mb"></div>
            <div class="close-expanded"></div>
        </div>
    
}
<div class="page category-page">
    <div class="page-body">
        @*description*@
        @if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="product-items row">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }
        @if (Model.Products.Count > 0)
        {
            @await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)
        }

        @if (Model.Products.Count > 0)
        {
            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
                <div class="product-items row">
                    @foreach (var product in Model.Products)
                    {
                        if (Model.PagingFilteringContext.ViewMode != "list")
                        {
                            <div class="col-xl-3 col-lg-4 col-md-6 col-sm-6 col-6">
                                @await Html.PartialAsync("_ProductBox", product)
                            </div>
                        }
                        else
                        {
                            <div class="col-12">
                                @await Html.PartialAsync("_ProductBoxListMode", product)
                            </div>
                        }
                    }
                </div>
            </div>
        }
        @{
            var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
        }
        @if (!pager.IsEmpty())
        {
            <div class="pager">
                @pager
            </div>
        }
    </div>
</div>
